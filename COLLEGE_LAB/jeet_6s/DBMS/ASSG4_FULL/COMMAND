CREATE TABLES===>>
	NORMAL
CREATE TABLE SAILOR(SID VARCHAR2(4) PRIMARY KEY CHECK(SID=LOWER(SID)),
SNAME VARCHAR2(15) CHECK(SNAME = INITCAP(SNAME)),MNAME VARCHAR2(15),Surname VARCHAR2(15),
RATING NUMBER(2), AGE NUMBER(3,1));
OR
CREATE TABLE SAILOR(SID VARCHAR(4),SNAME VARCHAR(15),MNAME VARCHAR(15),RATING NUMBER(2),AGE NUMBER(3,1),
CONSTRAINT PK_SID PRIMARY KEY(SID),
CONSTRAINT CK_SID CHECK(SID LIKE 'S%'),
CONSTRAINT CK_SNAME CHECK(SNAME=UPPER(SNAME)));


	WITH FOREIGN KEY
CREATE TABLE RESERVE(SID VARCHAR2(4) REFERENCES SAILOR(SID),BID NUMBER(3) REFERENCES BOAT(BID),R_DAY DATE CHECK(R_DAY<'1-JAN-2000'));
OR
CREATE TABLE RESERVE(
SID VARCHAR(4),BID NUMBER(3),R_DAY DATE,
CONSTRAINT COMPOSITE_PRIMARY PRIMARY KEY(SID,BID),
CONSTRAINT FK_SID FOREIGN KEY(SID) REFERENCES SAILOR(SID),
CONSTRAINT FK_BID FOREIGN KEY(BID) REFERENCES BOAT(BID),
CONSTRAINT CK_R_DAY CHECK(R_DAY>='1-JAN-2000'));


	WITH USER DEFINE CONSTRAINT
	CREATE TABLE CUST_100(
  2  EMP_ID NUMBER(3) CONSTRAINT PK_EMP_ID PRIMARY KEY,
  3  FIRST_NAME VARCHAR2(10) CONSTRAINT CK_FIRST_NAME CHECK(FIRST_NAME=INITCAP(FIRST_NAME)),
  4  LAST_NAME VARCHAR2(10) CONSTRAINT CK_LAST_NAME_INITCAP CHECK(LAST_NAME=INITCAP(LAST_NAME)) CONSTRAINT CK_LAST_NAME_NOTNULL CHECK(LAST_NAME IS NOT NULL),
  5  E_MAIL VARCHAR2(20) CONSTRAINT CK_E_MAIL CHECK(E_MAIL=UPPER(E_MAIL)),
  6  PH_NO VARCHAR2(15),
  7  HIRE_DATE DATE CONSTRAINT CK_HIRE_DATE CHECK(HIRE_DATE>'01-JAN-1980'),
  8  JOB_ID VARCHAR2(10) CONSTRAINT CK_JOB_ID CHECK(JOB_ID LIKE 'FI%' OR JOB_ID LIKE 'AD%' OR JOB_ID LIKE 'IT%'),
  9  SALARY NUMBER(8,2) CONSTRAINT CK_SALARY CHECK(SALARY>=4000 AND SALARY<=25000),
 10  MGR_ID NUMBER(3) ,
 11  DEPT_ID NUMBER(3) CONSTRAINT CK_DEPT_ID REFERENCES DEPT(DEPT_ID));

INSERT DATA ON TABLE===>>
	
	INSERT INTO SAILOR VALUES 	('&SID','&SNAME','&MNAME','&SURNAME',&RATING,&AGE);

	Enter value for sid: s74
	Enter value for sname: Horatio
	Enter value for mname: 
	Enter value for surname: Forrest
	Enter value for rating: 9
	Enter value for age: 35
	
UPDATE DATA ON TABLE===>>

	UPDATE <TABLE_NAME> SET <COLUMN_NAME>=<NEW_VALUE> WHERE 		<CONDITION>
	e.g. UPDATE CUST SET STAY_FROM_YEAR=2001 WHERE 					TERRITORY='ENGLAND';

DELETE DATA ON TABLE===>>

	DELETE <TABLE_NAME> WHERE <CONDITION>
	e.g.DELETE STUD WHERE MARKS=100;

RENAME===>>
	
	ALTER TABLE STUDENT RENAME COLUMN ROLL TO ID;
	ALTER TABLE STUDENT RENAME TO STUDENT_DB;

COLUMN DROP & ADD===>>
	
	ALTER TABLE STUD DROP COLUMN MARKS;
	ALTER TABLE STUD ADD(GRADE CHAR(1));

CONSTRAINT===>>

	SELECT CONSTRAINT_NAME,SEARCH_CONDITION FROM USER_CONSTRAINTS WHERE TABLE_NAME='CUST_100';

	ALTER TABLE CUST_100 DROP CONSTRAINT CK_SALARY;

	ALTER TABLE CUST_100 ADD CONSTRAINT CK_SALARY_NEW CHECK(SALARY>=4000 AND SALARY<=40000);


CREATE VIEW TABLE===>>
	
	CREATE VIEW SAILOR_RATING AS SELECT SID,AGE,RATING FROM 	SAILOR;

CREATE TRIGGER===>>

	#AT FRIST YOU NEED TO CREATE RATING_TRIGGER WITH 4 COLUMN#
	CREATE OR REPLACE TRIGGER RATING_TRIGGER AFTER UPDATE OF 	RATING ON SAILOR FOR EACH ROW <MAY ADD CONDITION>
	DECLARE
	BEGIN
		IF UPDATING THEN
			INSERT INTO SAILOR_TRIGGER VALUES(:OLD.SID,:OLD.RATING,:NEW.RATING,SYSDATE);
		END IF;
	END;
	/

CREATE PROCESSCS===>>
	
	create or replace procedure fact(n in number,n1 out 	number) is
		F number:=1;
	BEGIN
		for i in 1..n
		loop
			F:=F*i;
		end loop;
		n1:=F;
	END;
	/
PL-SQL CODE===>>

	DECLARE
		N SAILOR.SID%TYPE:='&N';
		NAME SAILOR.SNAME%TYPE;
		A SAILOR.AGE%TYPE;
		R SAILOR.RATING%TYPE;
	BEGIN
	
		select sname,rating,age  into name,r,a from sailor 			where sid=n;
		DBMS_OUTPUT.PUT_LINE('sailor name '||name||'age is 			'||a||'rating is '||r);	
	END;
	/